The Python-based Requisition System demonstrates a thoughtful and practical application of core software design principles, resulting in a solution that is both easy to use and easy to maintain. Developed for staff to submit and manage item requisitions, the system handles input, approval decisions, status tracking, and simple reporting. The focus on clean structure and modular design not only fulfills the task requirements effectively but also reflects an awareness of scalability and real-world usability — especially for educational or small organizational contexts.
At the first of this program  a strong observation to the Single Responsibility Principle (SRP)is done. Each method in the RequisitionSystem class has been clearly defined to handle one specific task. For example, the staff_info() method is solely responsible for collecting basic staff details, while requisitions_details() handles item entry and total calculation. Similarly, displaying requisitions, responding to pending approvals, and printing statistics are separated into their own methods. This modular approach makes the code highly maintainable if changes are needed in one part of the system, they can be made without affecting unrelated sections.The KISS (Keep It Simple, Stupid) principle is another key design choice in this system. The code avoids unnecessary complexity, using clear and direct logic that’s easy to follow. For instance, approval is determined by a single condition — whether the total is less than $500 — making it natural and easy to adjust in the future. Even the use of a global counter to generate unique IDs reflects this simplicity. The menu-driven interface is clear and beginner-friendly, allowing users to interact with the system without any confusion or training.The DRY (Don’t Repeat Yourself) principle is also applied effectively throughout the code. Reusable logic is placed inside methods to prevent repetition — such as requisitions_details(), which handles all the input and summing logic for requisition items in one place. If the format of item entry changes or additional validations are needed, changes only need to be made in that one method. This minimizes the chance of inconsistency and reduces maintenance effort over time.The Open/Closed Principle (OCP) is also evident in the design, particularly in the way approval decisions are handled. The approval logic is summarize inside the requisition_approval() method. If future enhancements such as tiered approval levels or role-based rules are required, they could be added within this method or through additional methods — without altering the structure of create_requisition(). This makes the code open to extension while being closed to modification, a key aspect of writing robust, scalable software.In addition to its clean structure, the system includes simple but thoughtful user input handling, such as catching invalid price entries. This not only improves usability but also helps prevent crashes and ensures data reliability — an important step for real-world applications or if this project is expanded further. The summary statistics feature also provides helpful insights into the status of requisitions, adding practical value for the user.Overall, this Requisition System project shows a strong understanding of software design principles and how they can be applied in a real-world context. The program is functional, readable, and easy to extend, with clear logic and structure. Its simplicity makes it approachable for newer developers, while its modular design ensures that future collaborators 
